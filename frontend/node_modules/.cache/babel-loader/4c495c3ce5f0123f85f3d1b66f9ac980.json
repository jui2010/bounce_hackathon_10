{"ast":null,"code":"var _jsxFileName = \"/home/rounak/bounce_hackathon_10/frontend/src/MarkerLayer.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport map from 'lodash.map';\nimport forEach from 'lodash.foreach';\nimport pluck from 'lodash.pluck';\nimport min from 'lodash.min';\nimport max from 'lodash.max';\nimport isNumber from 'lodash.isnumber';\nimport filter from 'lodash.filter';\nimport L from 'leaflet';\nimport { MapLayer } from 'react-leaflet';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\n\nfunction isInvalid(num) {\n  return !isNumber(num) && !num;\n}\n\nfunction isValid(num) {\n  return !isInvalid(num);\n}\n\nfunction shouldIgnoreLocation(loc) {\n  return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\n\nexport default class MarkerLayer extends MapLayer {\n  constructor(...args) {\n    super(...args);\n    this.shouldComponentUpdate = shouldPureComponentUpdate;\n  }\n\n  componentWillReceiveProps() {// no-op to override MapLayer behavior\n  }\n\n  componentDidMount() {\n    this.leafletElement = ReactDOM.findDOMNode(this.refs.container);\n    this.props.map.getPanes().overlayPane.appendChild(this.leafletElement);\n\n    if (this.props.fitBoundsOnLoad) {\n      this.fitBounds();\n    }\n\n    this.attachEvents();\n    this.updatePosition();\n  }\n\n  componentWillUnmount() {\n    this.props.map.getPanes().overlayPane.removeChild(this.leafletElement);\n  }\n\n  fitBounds() {\n    const markers = this.props.markers;\n    const lngs = filter(map(markers, this.props.longitudeExtractor), isValid);\n    const lats = filter(map(markers, this.props.latitudeExtractor), isValid);\n    const ne = {\n      lng: max(lngs),\n      lat: max(lats)\n    };\n    const sw = {\n      lng: min(lngs),\n      lat: min(lats)\n    };\n\n    if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n      return;\n    }\n\n    this.props.map.fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n  }\n\n  markersOrPositionExtractorsChanged(props) {\n    return this.props.markers !== props.markers || this.props.longitudeExtractor !== props.longitudeExtractor || this.props.latitudeExtractor !== props.latitudeExtractor;\n  }\n\n  componentDidUpdate(prevProps) {\n    this.props.map.invalidateSize();\n\n    if (this.props.fitBoundsOnUpdate && this.markersOrPositionExtractorsChanged(prevProps)) {\n      this.fitBounds();\n    }\n\n    this.updatePosition();\n  }\n\n  attachEvents() {\n    const map = this.props.map;\n    map.on('viewreset', () => this.updatePosition());\n  }\n\n  getLocationForMarker(marker) {\n    return {\n      lat: this.props.latitudeExtractor(marker),\n      lng: this.props.longitudeExtractor(marker)\n    };\n  }\n\n  updatePosition() {\n    forEach(this.props.markers, (marker, i) => {\n      const markerElement = ReactDOM.findDOMNode(this.refs[this.getMarkerRefName(i)]);\n      const location = this.getLocationForMarker(marker);\n\n      if (shouldIgnoreLocation(location)) {\n        return;\n      }\n\n      const point = this.props.map.latLngToLayerPoint(L.latLng(location));\n      L.DomUtil.setPosition(markerElement, point);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"container\",\n      className: \"leaflet-objects-pane\\n           leaflet-marker-pane\\n           leaflet-zoom-hide\\n           react-leaflet-marker-layer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.renderMarkers());\n  }\n\n  renderMarkers() {\n    const style = {\n      position: 'absolute'\n    };\n    const MarkerComponent = this.props.markerComponent;\n    return map(this.props.markers, (marker, index) => {\n      if (shouldIgnoreLocation(this.getLocationForMarker(marker))) {\n        return;\n      }\n\n      return React.createElement(MarkerComponent, Object.assign({}, this.props.propsForMarkers, {\n        key: index,\n        style: style,\n        map: this.props.map,\n        ref: this.getMarkerRefName(index),\n        marker: marker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }));\n    });\n  }\n\n  getMarkerRefName(index) {\n    return \"marker-\".concat(index);\n  }\n\n}\nMarkerLayer.propTypes = {\n  markers: React.PropTypes.array,\n  longitudeExtractor: React.PropTypes.func.isRequired,\n  latitudeExtractor: React.PropTypes.func.isRequired,\n  markerComponent: React.PropTypes.func.isRequired,\n  propsForMarkers: React.PropTypes.object,\n  fitBoundsOnLoad: React.PropTypes.bool,\n  fitBoundsOnUpdate: React.PropTypes.bool\n};","map":{"version":3,"sources":["/home/rounak/bounce_hackathon_10/frontend/src/MarkerLayer.js"],"names":["React","ReactDOM","map","forEach","pluck","min","max","isNumber","filter","L","MapLayer","shouldPureComponentUpdate","isInvalid","num","isValid","shouldIgnoreLocation","loc","lng","lat","MarkerLayer","shouldComponentUpdate","componentWillReceiveProps","componentDidMount","leafletElement","findDOMNode","refs","container","props","getPanes","overlayPane","appendChild","fitBoundsOnLoad","fitBounds","attachEvents","updatePosition","componentWillUnmount","removeChild","markers","lngs","longitudeExtractor","lats","latitudeExtractor","ne","sw","latLngBounds","latLng","markersOrPositionExtractorsChanged","componentDidUpdate","prevProps","invalidateSize","fitBoundsOnUpdate","on","getLocationForMarker","marker","i","markerElement","getMarkerRefName","location","point","latLngToLayerPoint","DomUtil","setPosition","render","renderMarkers","style","position","MarkerComponent","markerComponent","index","propsForMarkers","propTypes","PropTypes","array","func","isRequired","object","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport map from 'lodash.map';\nimport forEach from 'lodash.foreach';\nimport pluck from 'lodash.pluck';\nimport min from 'lodash.min';\nimport max from 'lodash.max';\nimport isNumber from 'lodash.isnumber';\nimport filter from 'lodash.filter';\nimport L from 'leaflet';\nimport { MapLayer } from 'react-leaflet';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\n\nexport type LngLat = {\n    lng: number;\nlat: number;\n}\n\nexport type Point = {\n    x: number;\ny: number;\n}\n\nexport type Map = {\n    layerPointToLatLng: (lngLat: Point) => LngLat;\nlatLngToLayerPoint: (lngLat: LngLat) => Point;\non: (event: string, handler: () => void) => void;\ngetPanes: () => Panes;\ninvalidateSize: () => void;\n}\n\nexport type Panes = {\n    overlayPane: Pane;\n}\n\nexport type Pane = {\n    appendChild: (element: Object) => void;\n}\n\nfunction isInvalid(num: number): boolean {\n    return !isNumber(num) && !num;\n}\n\nfunction isValid(num: number): boolean {\n    return !isInvalid(num);\n}\n\nfunction shouldIgnoreLocation(loc: LngLat): boolean {\n    return isInvalid(loc.lng) || isInvalid(loc.lat);\n}\n\nexport default class MarkerLayer extends MapLayer {\n    static propTypes = {\n        markers: React.PropTypes.array,\n        longitudeExtractor: React.PropTypes.func.isRequired,\n        latitudeExtractor: React.PropTypes.func.isRequired,\n        markerComponent: React.PropTypes.func.isRequired,\n        propsForMarkers: React.PropTypes.object,\n        fitBoundsOnLoad: React.PropTypes.bool,\n        fitBoundsOnUpdate: React.PropTypes.bool,\n    };\n\n    shouldComponentUpdate = shouldPureComponentUpdate;\n\n    componentWillReceiveProps() {\n        // no-op to override MapLayer behavior\n    }\n\n    componentDidMount(): void {\n        this.leafletElement = ReactDOM.findDOMNode(this.refs.container);\n        this.props.map.getPanes().overlayPane.appendChild(this.leafletElement);\n        if (this.props.fitBoundsOnLoad) {\n            this.fitBounds();\n        }\n        this.attachEvents();\n        this.updatePosition();\n    }\n\n    componentWillUnmount(): void {\n        this.props.map.getPanes().overlayPane.removeChild(this.leafletElement);\n    }\n\n    fitBounds(): void {\n        const markers = this.props.markers;\n        const lngs = filter(map(markers, this.props.longitudeExtractor), isValid);\n        const lats = filter(map(markers, this.props.latitudeExtractor), isValid);\n        const ne = { lng: max(lngs), lat: max(lats) };\n        const sw = { lng: min(lngs), lat: min(lats) };\n\n        if (shouldIgnoreLocation(ne) || shouldIgnoreLocation(sw)) {\n            return;\n        }\n\n        this.props.map.fitBounds(L.latLngBounds(L.latLng(sw), L.latLng(ne)));\n    }\n\n    markersOrPositionExtractorsChanged(props): boolean {\n        return this.props.markers !== props.markers\n            || this.props.longitudeExtractor !== props.longitudeExtractor\n            || this.props.latitudeExtractor !== props.latitudeExtractor;\n    }\n\n    componentDidUpdate(prevProps): void {\n        this.props.map.invalidateSize();\n        if (this.props.fitBoundsOnUpdate && this.markersOrPositionExtractorsChanged(prevProps)) {\n            this.fitBounds();\n        }\n        this.updatePosition();\n    }\n\n    attachEvents(): void {\n        const map: Map = this.props.map;\n        map.on('viewreset', () => this.updatePosition());\n    }\n\n    getLocationForMarker(marker): LngLat {\n        return {\n            lat: this.props.latitudeExtractor(marker),\n            lng: this.props.longitudeExtractor(marker)\n        };\n    }\n\n    updatePosition(): void {\n        forEach(this.props.markers, (marker, i) => {\n            const markerElement = ReactDOM.findDOMNode(\n                this.refs[this.getMarkerRefName(i)]\n            );\n\n            const location = this.getLocationForMarker(marker);\n\n            if (shouldIgnoreLocation(location)) {\n                return;\n            }\n\n            const point = this.props.map.latLngToLayerPoint(L.latLng(location));\n\n            L.DomUtil.setPosition(markerElement, point);\n        });\n    }\n\n    render(): React.Element {\n        return (\n            <div ref=\"container\"\n                 className={`leaflet-objects-pane\n           leaflet-marker-pane\n           leaflet-zoom-hide\n           react-leaflet-marker-layer`} >\n                {this.renderMarkers()}\n            </div>\n        );\n    }\n\n    renderMarkers(): Array<React.Element> {\n        const style = { position: 'absolute' };\n        const MarkerComponent = this.props.markerComponent;\n        return map(this.props.markers, (marker, index: number) => {\n            if (shouldIgnoreLocation(this.getLocationForMarker(marker))) {\n                return;\n            }\n\n            return (\n                <MarkerComponent\n                    {...this.props.propsForMarkers}\n                    key={index}\n                    style={style}\n                    map={this.props.map}\n                    ref={this.getMarkerRefName(index)}\n                    marker={marker} />\n            );\n        });\n    }\n\n    getMarkerRefName(index: number): string {\n        return `marker-${index}`;\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}